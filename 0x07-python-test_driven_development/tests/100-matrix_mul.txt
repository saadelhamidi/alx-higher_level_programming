**************************************
Test cases for matrix_mul module
**************************************
===============================================================
First import 'matrix_mul' from the '100-matrix_mul' module:
    
    >>> matrix_mul = __import__('100-matrix_mul').matrix_mul

===============================================================
check module docstring:

    >>> m = __import__("100-matrix_mul").__doc__
    >>> len(m) > 1
    True

===============================================================
check function docstring:

    >>> f = __import__("100-matrix_mul").matrix_mul.__doc__
    >>> len(f) > 1
    True

===============================================================
Regular tests:

    >>> matrix_mul([[1, 2], [3, 4]], [[5, 6], [7, 8]])
    [[19, 22], [43, 50]]

    >>> matrix_mul([[1, 2], [3, 4], [5, 6]], [[7, 8, 9], [10, 11, 12]])
    [[27, 30, 33], [61, 68, 75], [95, 106, 117]]

    >>> matrix_mul([[1.5]], [[1, 2, 3, 4]])
    [[1.5, 3.0, 4.5, 6.0]]


===============================================================

    >>> matrix_mul("Alx", [[1, 2]])
    Traceback (most recent call last):
    TypeError: m_a must be a list

    >>> matrix_mul([[1, 2]], "Alx")
    Traceback (most recent call last):
    TypeError: m_b must be a list

    >>> matrix_mul(["Alx", "school"], [[1, 2]])
    Traceback (most recent call last):
    TypeError: m_a must be a list of lists

    >>> matrix_mul([[1, 2]], ["Alx", 7])
    Traceback (most recent call last):
    TypeError: m_b must be a list of lists

    >>> matrix_mul([], [[2, 1]])
    Traceback (most recent call last):
    ValueError: m_a can't be empty

    >>> matrix_mul([[3, 4]], [[]])
    Traceback (most recent call last):
    ValueError: m_b can't be empty

    >>> matrix_mul([[1, 2], ["Alx", 3]], [[4, 5], [6, 7]])
    Traceback (most recent call last):
    TypeError: m_a should contain only integers or floats

    >>> matrix_mul([[1, 2], [3, 4]], [[5, 6], ["Alx", 8]])
    Traceback (most recent call last):
    TypeError: m_b should contain only integers or floats

    >>> matrix_mul([[1, 2], [2]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    TypeError: each row of m_a must be of the same size

    >>> matrix_mul([[1, 2], [3, 4]], [[1], [1, 1]])
    Traceback (most recent call last):
    TypeError: each row of m_b must be of the same size

    >>> matrix_mul([[1, 2, 3], [4, 5, 6]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ValueError: m_a and m_b can't be multiplied

    >>> matrix_mul([[1, 2, 3], [4, 5, 6]])
    Traceback (most recent call last):
    TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

    >>> matrix_mul()
    Traceback (most recent call last):
    TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
